tokens:
 - ID:
    description: "a string consisting of any combination of letters (in the range a-z, A-Z), digits (in the range 0-9) as well as underscores ( _ ) with the exception that it may not start with a digit."
 - STR:
    description: "a string consisting of any combination of letters, digits, and symbols (e.g. $, âˆš)"
 - NUM:
    description: "a string consisting of only digits separated by at most one dot ( . ) at most one case insensitive \"e\" which must come after the dot."
 - LPAREN:
    lexeme: "("
 - RPAREN:
    lexeme: ")"
 - LSQUARE:
    lexeme: "["
 - RSQUARE:
    lexeme: "]"
 - LBRACE:
    lexeme: "{"
 - RBRACE:
    lexeme: "}"
 - EQUALS:
    lexeme: "="
 - EQUALS_EQUALS:
    lexeme: "=="
 - NE:
    lexeme: "!="
 - LT:
    lexeme: "<"
 - GT:
    lexeme: ">"
 - LE:
    lexeme: "<="
 - GE:
    lexeme: ">="
 - PLUS:
    lexeme: "+"
 - MINUS:
    lexeme: "-"
 - STAR:
    lexeme: "*"
 - SLASH:
    lexeme: "/"
 - PCT:
    lexeme: "%"
 - CARET:
    lexeme: "^"
 - AMP:
    lexeme: "&"
 - PIPE:
    lexeme: "|"
 - NEGATE:
    lexeme: "~"
 - NOT:
    lexeme: "!"
 - PLUS_EQUALS:
    lexeme: "+="
 - MINUS_EQUALS:
    lexeme: "-="
 - STAR_EQUALS:
    lexeme: "*="
 - SLASH_EQUALS:
    lexeme: "/="
 - PCT_EQUALS:
    lexeme: "%="
 - CARET_EQUALS:
    lexeme: "^="
 - AMP_EQUALS:
    lexeme: "&="
 - PIPE_EQUALS:
    lexeme: "|="
 - PLUS_PLUS:
    lexeme: "++"
 - MINUS_MINUS:
    lexeme: "--"
 - STAR_STAR:
    lexeme: "**"
 - SLASH_SLASH:
    lexeme: "//"
 - AMP_AMP:
    lexeme: "&&"
 - LT_LT:
    lexeme: "<<"
 - GT_GT:
    lexeme: "<<"
 - L_ARROW:
    lexeme: "<-"
 - R_ARROW:
    lexeme: "->"
 - PIPE_PIPE:
    lexeme: "||"
 - DOT:
    lexeme: "."
 - COMMA:
    lexeme: ","
 - COLON:
    lexeme: ":"
 - SEMICOLON:
    lexeme: ";"
 - QUESTION:
    lexeme: "?"
 - POUND:
    lexeme: "#"
 - DOLLAR:
    lexeme: "$"
 - QUOTE:
    lexeme: "\""
 - APOSTROPHE:
    lexeme: "'"
 - BACKSLASH:
    lexeme: "\\\\"
 - BACKTICK:
    lexeme: "`"
 - UNDERSCORE:
    lexeme: "_"
 - BOF_:
    lexeme: "BOF"
 - EOF_:
    lexeme: "EOF"
keywords:
 - IF:
    lexeme: "if"
 - ELSE:
    lexeme: "else"
 - WHILE:
    lexeme: "while"
 - FOR:
    lexeme: "for"
 - DO:
    lexeme: "do"
 - RETURN:
    lexeme: "return"
 - INT:
    lexeme: "int"
 - FLOAT:
    lexeme: "float"
 - DOUBLE:
    lexeme: "double"
 - LONG:
    lexeme: "long"
 - STRING:
    lexeme: "string"
 - NONE_:
    lexeme: "none"
 - NULL_:
    lexeme: "NULL"
 - NULLPTR:
    lexeme: "nullptr"
 - NEW:
    lexeme: "new"
 - DELETE:
    lexeme: "delete"
 - INCLUDE:
    lexeme: "include"
 - DEF:
    lexeme: "def"
whitespace:
 - SPACE:
    description: "ascii 32"
 - TAB:
    description: "ascii 9"
 - NEWLINE:
    description: "ascii 10"
 - COMMENT:
    description: "the string \"//\" followed by all the characters up to and including the next newline"
 - MULTILINE_COMMENT:
    description: "all characters wrapped by the two strings \"/\\*\" and \"\\*/\""
nonterminalSymbols:
 - "globals"
 - "include"
 - "procedure"
 - "main"
 - "param"
 - "params"
 - "type"
 - "dcl"
 - "dcls"
 - "statements"
 - "statement"
 - "lvalue"
 - "string"
 - "expr"
 - "term"
 - "test"
 - "factor"
 - "arglist"
 - "whitespace"
startSymbol: "globals"
productionRules:
 - "globals"
 - "globals include globals"
 - "globals procedure globals"
#  - "globals statement globals"
 - "include POUND INCLUDE LT ID GT"
 - "include POUND INCLUDE QUOTE ID QUOTE"
 - "procedure type ID LPAREN params RPAREN LBRACE statements RBRACE"
#  - "procedure DEF STR LPAREN params RPAREN LBRACE statements RBRACE"
 - "params"
 - "params param params"
 - "param type ID"
#  - "param ID"
 - "type INT"
 - "type INT STAR"
 - "type DOUBLE"
 - "type DOUBLE STAR"
 - "type FLOAT"
 - "type FLOAT STAR"
 - "type ID"
 - "type ID STAR"
 - "statements"
 - "statements statement statements"
 - "statement type ID SEMICOLON"
 - "statement type ID EQUALS expr SEMICOLON"
#  - "statement STR BECOMES expr SEMICOLON"
 - "statement RETURN expr SEMICOLON"
 - "expr term"
 - "expr expr PLUS term"
 - "expr expr MINUS term"
 - "term factor"
 - "term term STAR factor"
 - "term term STAR_STAR factor"
 - "term term SLASH factor"
 - "term term SLASH_SLASH factor"
 - "term term PCT factor"
 - "factor NUM"
 - "factor ID"
 - "factor QUOTE string QUOTE"
 - "factor ID QUOTE string QUOTE"
 - "string"
 - "string ID"
 - "string STR"
 - "whitespace"