#ifndef __CML_TESTS_CONVOLUTION_TESTS_H__
#define __CML_TESTS_CONVOLUTION_TESTS_H__

#include "test.h"

void convolutionTest(){
    using namespace cml;
    using namespace cml::nn;
    using Function::Softmax;

    auto cv2 = cml::nn::Conv2D<float>(3, 4, 2);
    cv2("weights")->set<4, 3, 2, 2>({{{{-0.2128469944, -0.2116442323},
                                       {-0.0980538577,  0.1841635108}},

                                      {{ 0.1361308396,  0.2344738245},
                                       { 0.0465479195, -0.1771032512}},

                                      {{ 0.0385181606, -0.1699323654},
                                       { 0.2295306325, -0.1966954470}}},


                                     {{{ 0.2795472145,  0.2259643078},
                                       { 0.2168567777,  0.1558705270}},

                                      {{-0.1490196586,  0.0373466611},
                                       { 0.0400570929,  0.0593909323}},

                                      {{-0.0951304138,  0.2830602527},
                                       {-0.1026438326, -0.0253164470}}},


                                     {{{-0.2283988148, -0.1670298576},
                                       {-0.2377491742,  0.1538172960}},

                                      {{ 0.2755650282,  0.2369828820},
                                       { 0.1343505085,  0.1783807874}},

                                      {{-0.2068789899,  0.2582527995},
                                       { 0.1237063110, -0.1735855490}}},


                                     {{{-0.1677439511,  0.0814439058},
                                       {-0.2349391878,  0.2760998011}},

                                      {{ 0.2132624388,  0.1306959093},
                                       {-0.2537234426, -0.0894639492}},

                                      {{-0.1200863719,  0.2372622490},
                                       { 0.1516453922, -0.1889315844}}}});
    cv2("bias")->set<4>({-0.1039274931, -0.2326363325, -0.0177855194, -0.1824789345});


    auto x = make_tensor<float, 1, 3, 3, 3>({{{{ 0.7431939840,  1.5574400425, -1.4349900484},
                                               { 0.9749389887,  0.4997949898, -0.6531829834},
                                               { 0.3381200135,  0.2615920007, -1.0640499592}},

                                              {{ 1.2514699697, -0.6556590199,  0.7488840222},
                                               { 0.9705640078,  0.4248160124, -0.2654930055},
                                               { 1.0236999989,  1.0788300037, -0.8307849765}},

                                              {{ 0.7306740284, -1.1468199492, -1.0085799694},
                                               {-0.0575066991, -1.0090299845, -1.8340799809},
                                               {-1.6283700466, -0.7790560126, -0.1317490041}}}}, true);
                                               
    auto y = cv2(x);

    auto expected_y = make_tensor<float, 1, 4, 2, 2>({{{{-0.2004214823,  0.1084852591},
                                                        {-0.3651508391,  0.0191579591}},

                                                       {{ 0.1068199724, -0.0144078005},
                                                        { 0.1499699950, -0.7688546181}},

                                                       {{-0.4862182736, -0.1762713194},
                                                        { 0.0191186145, -0.5362207890}},

                                                       {{-0.5523443818, -0.8924311399},
                                                        {-0.7385179400, -1.2254931927}}}});

    assert_equals(y, expected_y);
    
}

void convolutionTests(){
    convolutionTest();

    using namespace std;
    cout << "All Convolution Tests Passed!" << endl << endl;
}

#endif // __CML_TESTS_CONVOLUTION_TESTS_H__
